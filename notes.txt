Preface
=======
- Can I use algorithm X to solve my problem?  If so, how do I implement it?
- Recommends the "1,180-page bible on algorithms", Introduction to Algorithms by Cormen et al. (2001)

Principle: Use Real Code, Not Pseudocode

Principle: Separate the Algorithm from the Problem Being Solved
- Quote: "Premature optimization is the root of all evil" - C. A. R. Hoare

Principle: Introduce Just Enough Mathematics

Principle: Support Mathematical Analysis Empirically

Audience
 - Recommended Reading - "The Art of Computer Programming", Volumes 1-3 by Donald Knuth


Chapter 1 - Algorithms Matter
=============================

Understand the Problem
Experiment if Necessary
Algorithms to the Rescue
- Balancing Binary trees
Side Story
- Investigating the behavior of malloc() in C
The Moral of the Story
- The ability to choose an acceptable algorithm for your needs is a critical skill that any good software developer should have.


Chapter 2 - The Mathematics of Algorithms
=========================================

- You are trying to predict which algorithm will be fastest for a particular data set on a particular platform.

Size of a Problem Instance
- Designing efficient algorithms often starts by selecting the proper data structures in which to represent the problem to be solved.

Rate of Growth of Functions
- Represent the rate of growth of a function's execution time as a function of the size of the imput problem instance.
- Constants matter
- The size of n is not always large

Analysis in the Best, Average, and Worst Cases

Worst-Case
- In some instances, the worst case may be unlikely enough that it can be ignored in favor of the average case
- In other instances, the worst case may be unacceptable. Open-heart surgery application example

Average-Case

Best-Case

Performance Families
	- Constant
	- Logarithmic
	- Sublinear
	- Linear
	- n log (n)
	- Quadratic
	- Exponential
	
Discussion 0: Constant Behavior

Discussion 1: Log n Behavior
- There's a typo in the while loop

Discussion 2: Sublinear O(n^d) Behavior for d<1

Discussion 3: Linear Performance
- LinearAddition
- LinearAdditionLast

Discussion 4: n log n Performance
 - Divide and Conquer

Discussion 5a: Quadratic Performance
 - QuadraticMultiplication (elementary school algorithm)
 - The primary indicator for quadratic performance behavior is a nested loop structure
 
Discussion 5b: Less Obvious Performance Computations

Mix of Operations

One Final Point


Chapter 3 - Patterns and Domains
=========================================

There are several reasons why programmers continue to write the same solutions for problems from scratch.
1.  The programmer doesn't realize that the problem has already been solved.
2.  It's not clear that the existing code will actually fit the specific problem facing the programmer.
3.  It's not easy to find code that really solves the problem at hand or code that can be easily modified to solve that problem.

Patterns: A Communication Language
 - A design pattern is a proven solution to a commonly occurring problem.
 - Armed with a set of design patterns in your toolbox, you are on your way to becoming a master craftsman of software design.
 - Algorithms are, in fact, proven solutions to known problems, so they fit our definition of a pattern.
 
 The Form of an Algorithm Pattern
 
 Algorithm Pattern Format
 
 Pseudocode Pattern Format
 
 Design Format
 
 Empirical Evaluation Format
 
 Domains and Algorithms
 - Algorithms, like applications, have domains.
 	- Examples: Search, Graph Traversal, Artificial Intelligence
 	
 Floating-Point Computations
 
 Rounding Error 
 - With internal floating point numbers represented in binary, there will be subtle rounding errors.  
 - As a result, floating-point values are only approximate.
 
 Comparing Values
 - Is it truly the case that these two floating-point numbers must be exactly equal?
 - Sometimes, however, it may be the case that x≈y and y≈z, but it might not be the case that x≈z.  This breaks the principle of Transitivity and makes it really challenging to write correct code.
 
 Special Quantities
 - Possitive and Negative infinity
 - NaN
 - Positive zero
 - Negative zero
 - In Java, 1/0.0 is positive infinity
 - In Java, 1/0 throws a java.lang.ArithmeticException
 
 Performance
 
 Manual Memory Allocation
 
 Choosing a Programming Language
 - Garbage collection versus manual memory allocation
 - Bytecode interpretation versus compiled code
 - Dynamic versus static typing
 
 
 Chapter 4 - Sorting Algorithms
 ==============================
 
 - Numerous computations and tasks become simple by properly sorting information in advance.
 - The search for efficient sorting algorithms dominated the early days of computing.
 
Terminology
 
Representation
 - There are different ways to encode the problem set
 	- Example: 
 		[eagle, cat, ant, dot, ball]
 		[e,a,g,l,e,c,a,t,¬,¬,a,n,t,¬,¬,d,o,t,¬,¬,b,a,l,l,¬]
 
Comparable Elements
 
Stable sorting
  - When elements are equal, it may be important to maintain their relative ordering in the sorted set.
  	- Example: sort by first starting letter only - 
  		[cat, dog, rat, doll] is sorted to [cat, dog, doll, rat] - 'dog' and 'doll' are equal, but they keep the same relative ordering in the new sorted collection
  	- Algorithms that exhibit this behavior are said to be "stable".
 
Analysis Techniques
 - A fundamental result in computer science is that no algorithm that sorts by comparing elements can do better than O(n log n) performance in average or worst case.
 - Given n items, there are n! permutations of these elements.
 
Insertion Sort
	- Context - Use INSERTION SORT when you have a small number of elements to sort or the elements in the initial collection are already "nearly sorted." 
 	- Performance
 		- Best: O(n)
 		- Average: O(n^2)
 		- Worst: O(n^2)
 	- Forces
 	- Consequences
 		- Works better as the "mostly sortedness" of the original collection improves.
 	- Analysis
 		- 